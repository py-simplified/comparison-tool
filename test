#!/usr/bin/env python3
"""
Excel Comparison Tool - Advanced Version (No Security)
Compares Excel files between two folders and highlights differences

Author: Auto-generated by setup script
Date: July 23, 2025
Version: 2.0 - Simplified
"""

import pandas as pd
import openpyxl
from openpyxl.styles import PatternFill, Font
import os
import shutil
from pathlib import Path
import numpy as np
import json
from datetime import datetime
import sys
import traceback

# Optional import for .xls support
try:
    import xlrd
    XLS_SUPPORT = True
except ImportError:
    XLS_SUPPORT = False

class ExcelComparator:
    def __init__(self, base_path):
        """
        Initialize the Excel Comparator
        
        Args:
            base_path (str): Base directory containing new, prev, and template folders
        """
        self.base_path = Path(base_path)
        self.new_folder = self.base_path / "new"
        self.prev_folder = self.base_path / "prev"
        self.template_folder = self.base_path / "template"
        self.output_folder = self.base_path / "comparison_results"
        self.logs_folder = self.base_path / "logs"
        
        # Create folders if they don't exist
        for folder in [self.output_folder, self.logs_folder]:
            folder.mkdir(exist_ok=True)
        
        # Define styling for highlighting differences
        self.red_fill = PatternFill(start_color="FFFF0000", end_color="FFFF0000", fill_type="solid")
        self.red_font = Font(color="FFFFFF", bold=True)
        self.green_fill = PatternFill(start_color="FF00FF00", end_color="FF00FF00", fill_type="solid")
        self.yellow_fill = PatternFill(start_color="FFFFFF00", end_color="FFFFFF00", fill_type="solid")
        
        # Statistics tracking
        self.stats = {
            'total_files_processed': 0,
            'total_sheets_compared': 0,
            'total_differences_found': 0,
            'numeric_differences': 0,
            'text_differences': 0,
            'files_with_differences': 0,
            'processing_errors': 0,
            'start_time': None,
            'end_time': None,
            'file_details': {},
            'error_log': []
        }
        
        # Setup logging
        self.setup_logging()
    
    def setup_logging(self):
        """Setup logging to file"""
        self.log_file = self.logs_folder / f"comparison_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
    def log_message(self, message, level="INFO"):
        """Log message to file and console"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = f"[{timestamp}] [{level}] {message}"
        
        # Print to console
        if level == "ERROR":
            print(f"‚ùå {message}")
        elif level == "WARNING":
            print(f"‚ö†Ô∏è  {message}")
        elif level == "SUCCESS":
            print(f"‚úÖ {message}")
        else:
            print(f"‚ÑπÔ∏è  {message}")
        
        # Write to log file
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"Failed to write to log file: {e}")
    
    def validate_setup(self):
        """Validate that required folders exist"""
        missing_folders = []
        
        for folder_name, folder_path in [
            ("new", self.new_folder),
            ("prev", self.prev_folder), 
            ("template", self.template_folder)
        ]:
            if not folder_path.exists():
                missing_folders.append(folder_name)
        
        if missing_folders:
            self.log_message(f"Missing required folders: {', '.join(missing_folders)}", "ERROR")
            return False
        
        return True
    
    def get_matching_files(self):
        """
        Get list of Excel files that exist in all three folders
        Supports both .xlsx and .xls formats
        
        Returns:
            list: List of file names present in all folders
        """
        try:
            # Get both .xlsx and .xls files
            new_xlsx = set(f.name for f in self.new_folder.glob("*.xlsx") if not f.name.startswith('~'))
            new_xls = set(f.name for f in self.new_folder.glob("*.xls") if not f.name.startswith('~'))
            new_files = new_xlsx.union(new_xls)
            
            prev_xlsx = set(f.name for f in self.prev_folder.glob("*.xlsx") if not f.name.startswith('~'))
            prev_xls = set(f.name for f in self.prev_folder.glob("*.xls") if not f.name.startswith('~'))
            prev_files = prev_xlsx.union(prev_xls)
            
            template_xlsx = set(f.name for f in self.template_folder.glob("*.xlsx") if not f.name.startswith('~'))
            template_xls = set(f.name for f in self.template_folder.glob("*.xls") if not f.name.startswith('~'))
            template_files = template_xlsx.union(template_xls)
            
            # Get files that exist in all three folders
            common_files = new_files.intersection(prev_files).intersection(template_files)
            
            if not common_files:
                self.log_message("No matching Excel files found in all three folders", "WARNING")
                self.log_message(f"New folder files (.xlsx/.xls): {list(new_files)}", "INFO")
                self.log_message(f"Prev folder files (.xlsx/.xls): {list(prev_files)}", "INFO")
                self.log_message(f"Template folder files (.xlsx/.xls): {list(template_files)}", "INFO")
                return []
            
            self.log_message(f"Found {len(common_files)} matching files (both .xlsx and .xls supported)", "SUCCESS")
            for file in sorted(common_files):
                file_ext = "üìÑ" if file.endswith('.xlsx') else "üìã"
                self.log_message(f"  {file_ext} {file}", "INFO")
            
            return list(sorted(common_files))
            
        except Exception as e:
            self.log_message(f"Error getting matching files: {e}", "ERROR")
            return []
    
    def is_numeric(self, value):
        """
        Check if a value is numeric
        
        Args:
            value: The value to check
            
        Returns:
            bool: True if numeric, False otherwise
        """
        if pd.isna(value) or value is None or value == "":
            return False
        
        try:
            float(value)
            return True
        except (ValueError, TypeError):
            return False
    
    def load_workbook(self, file_path):
        """
        Load an Excel workbook, handling both .xlsx and .xls formats
        
        Args:
            file_path (Path): Path to the Excel file
            
        Returns:
            Workbook object
        """
        try:
            file_str = str(file_path)
            
            if file_str.endswith('.xls'):
                if not XLS_SUPPORT:
                    self.log_message("Warning: xlrd package not installed. .xls files may not work properly.", "WARNING")
                    self.log_message("Install xlrd with: pip install xlrd", "INFO")
                    # Try to load as .xlsx anyway (might work if it's actually .xlsx with .xls extension)
                    return openpyxl.load_workbook(file_path, data_only=True)
                
                # For .xls files, use pandas to read and convert to openpyxl
                # This is a workaround since openpyxl doesn't support .xls directly
                
                # Read all sheets from .xls file
                xls_data = pd.read_excel(file_path, sheet_name=None, engine='xlrd')
                
                # Create a new .xlsx workbook
                temp_xlsx_path = file_path.with_suffix('.temp.xlsx')
                
                with pd.ExcelWriter(temp_xlsx_path, engine='openpyxl') as writer:
                    for sheet_name, df in xls_data.items():
                        df.to_excel(writer, sheet_name=sheet_name, index=False)
                
                # Load the converted .xlsx file
                wb = openpyxl.load_workbook(temp_xlsx_path, data_only=True)
                
                # Clean up temp file
                try:
                    temp_xlsx_path.unlink()
                except:
                    pass  # Ignore cleanup errors
                
                return wb
                
            else:
                # For .xlsx files, use openpyxl directly
                return openpyxl.load_workbook(file_path, data_only=True)
                
        except Exception as e:
            self.log_message(f"Error loading {file_path}: {str(e)}", "ERROR")
            raise
    
    def compare_sheets(self, new_file, prev_file, template_file, output_file):
        """
        Compare all sheets in the Excel files and highlight differences
        
        Args:
            new_file (Path): Path to new Excel file
            prev_file (Path): Path to previous Excel file
            template_file (Path): Path to template Excel file
            output_file (Path): Path to output Excel file
        """
        file_stats = {
            'sheets_processed': 0,
            'differences_found': 0,
            'numeric_differences': 0,
            'text_differences': 0,
            'errors': []
        }
        
        try:
            # Copy template file to output location
            shutil.copy2(template_file, output_file)
            self.log_message(f"Template copied to: {output_file.name}", "INFO")
            
            # Load workbooks - handle both .xlsx and .xls formats
            new_wb = self.load_workbook(new_file)
            prev_wb = self.load_workbook(prev_file)
            output_wb = self.load_workbook(output_file)
            
        except Exception as e:
            error_msg = f"Error loading workbooks: {str(e)}"
            self.log_message(error_msg, "ERROR")
            file_stats['errors'].append(error_msg)
            self.stats['processing_errors'] += 1
            return file_stats
        
        try:
            # Get common sheet names
            new_sheets = set(new_wb.sheetnames)
            prev_sheets = set(prev_wb.sheetnames)
            template_sheets = set(output_wb.sheetnames)
            
            common_sheets = new_sheets.intersection(prev_sheets).intersection(template_sheets)
            
            if not common_sheets:
                error_msg = f"No common sheets found in {new_file.name}"
                self.log_message(error_msg, "WARNING")
                file_stats['errors'].append(error_msg)
                return file_stats
            
            self.log_message(f"Processing {len(common_sheets)} sheets in {new_file.name}", "INFO")
            
            for sheet_name in sorted(common_sheets):
                self.log_message(f"  üîç Comparing sheet: {sheet_name}", "INFO")
                
                try:
                    new_sheet = new_wb[sheet_name]
                    prev_sheet = prev_wb[sheet_name]
                    output_sheet = output_wb[sheet_name]
                    
                    sheet_result = self.compare_single_sheet(
                        new_sheet, prev_sheet, output_sheet, sheet_name
                    )
                    
                    file_stats['differences_found'] += sheet_result['total_differences']
                    file_stats['numeric_differences'] += sheet_result['numeric_differences']
                    file_stats['text_differences'] += sheet_result['text_differences']
                    file_stats['sheets_processed'] += 1
                    
                except Exception as e:
                    error_msg = f"Error comparing sheet {sheet_name}: {str(e)}"
                    self.log_message(error_msg, "ERROR")
                    file_stats['errors'].append(error_msg)
                    continue
            
            # Save the output file
            output_wb.save(output_file)
            
            if file_stats['differences_found'] > 0:
                self.log_message(f"Differences found and highlighted in: {output_file.name}", "SUCCESS")
            else:
                self.log_message(f"No differences found in: {output_file.name}", "SUCCESS")
                
        except Exception as e:
            error_msg = f"Error processing file: {str(e)}"
            self.log_message(error_msg, "ERROR")
            file_stats['errors'].append(error_msg)
            
        finally:
            # Close workbooks
            try:
                new_wb.close()
                prev_wb.close()
                output_wb.close()
            except:
                pass
        
        return file_stats
    
    def compare_single_sheet(self, new_sheet, prev_sheet, output_sheet, sheet_name):
        """
        Compare a single sheet and highlight differences
        
        Args:
            new_sheet: New sheet object
            prev_sheet: Previous sheet object
            output_sheet: Output sheet object
            sheet_name: Name of the sheet
            
        Returns:
            dict: Statistics about the comparison
        """
        result = {
            'total_differences': 0,
            'numeric_differences': 0,
            'text_differences': 0
        }
        
        # Get the maximum dimensions
        max_row = max(new_sheet.max_row, prev_sheet.max_row, 1)
        max_col = max(new_sheet.max_column, prev_sheet.max_column, 1)
        
        for row in range(1, max_row + 1):
            for col in range(1, max_col + 1):
                try:
                    # Get cell values
                    new_cell = new_sheet.cell(row=row, column=col)
                    prev_cell = prev_sheet.cell(row=row, column=col)
                    output_cell = output_sheet.cell(row=row, column=col)
                    
                    new_value = new_cell.value
                    prev_value = prev_cell.value
                    
                    # Skip if both cells are empty
                    if (new_value is None or new_value == "") and (prev_value is None or prev_value == ""):
                        continue
                    
                    # Check if values are different
                    if new_value != prev_value:
                        result['total_differences'] += 1
                        
                        # Handle different types of differences
                        if self.is_numeric(new_value) and self.is_numeric(prev_value):
                            # Both numeric - calculate difference
                            try:
                                new_num = float(new_value) if new_value is not None else 0
                                prev_num = float(prev_value) if prev_value is not None else 0
                                difference = new_num - prev_num
                                
                                output_cell.value = difference
                                output_cell.fill = self.red_fill
                                output_cell.font = self.red_font
                                result['numeric_differences'] += 1
                                
                            except (ValueError, TypeError):
                                output_cell.value = new_value
                                output_cell.fill = self.red_fill
                                output_cell.font = self.red_font
                                result['text_differences'] += 1
                        
                        elif self.is_numeric(new_value) and not self.is_numeric(prev_value):
                            # New is numeric, prev is not
                            output_cell.value = new_value
                            output_cell.fill = self.green_fill  # Green for new numeric
                            result['numeric_differences'] += 1
                        
                        elif not self.is_numeric(new_value) and self.is_numeric(prev_value):
                            # Prev was numeric, new is not
                            output_cell.value = new_value
                            output_cell.fill = self.yellow_fill  # Yellow for type change
                            result['text_differences'] += 1
                        
                        else:
                            # Both non-numeric but different
                            output_cell.value = new_value
                            output_cell.fill = self.red_fill
                            output_cell.font = self.red_font
                            result['text_differences'] += 1
                
                except Exception as e:
                    continue  # Skip problematic cells
        
        if result['total_differences'] > 0:
            self.log_message(f"    üìä {result['total_differences']} differences "
                           f"({result['numeric_differences']} numeric, {result['text_differences']} text)", "INFO")
        
        return result
    
    def generate_summary_report(self):
        """Generate comprehensive summary reports"""
        try:
            self.stats['end_time'] = datetime.now()
            duration = (self.stats['end_time'] - self.stats['start_time']).total_seconds()
            
            # Text report
            report_file = self.output_folder / "comparison_summary.txt"
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("Excel Comparison Summary Report\n")
                f.write("=" * 50 + "\n\n")
                f.write(f"Generated: {self.stats['end_time'].strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Duration: {duration:.2f} seconds\n\n")
                
                f.write("Overall Statistics:\n")
                f.write("-" * 20 + "\n")
                f.write(f"Total files processed: {self.stats['total_files_processed']}\n")
                f.write(f"Total sheets compared: {self.stats['total_sheets_compared']}\n")
                f.write(f"Files with differences: {self.stats['files_with_differences']}\n")
                f.write(f"Total differences found: {self.stats['total_differences_found']}\n")
                f.write(f"Numeric differences: {self.stats['numeric_differences']}\n")
                f.write(f"Text differences: {self.stats['text_differences']}\n")
                f.write(f"Processing errors: {self.stats['processing_errors']}\n\n")
                
                f.write("File Details:\n")
                f.write("-" * 15 + "\n")
                for filename, details in self.stats['file_details'].items():
                    f.write(f"\n{filename}:\n")
                    f.write(f"  Sheets processed: {details['sheets_processed']}\n")
                    f.write(f"  Differences found: {details['differences_found']}\n")
                    f.write(f"  Numeric differences: {details['numeric_differences']}\n")
                    f.write(f"  Text differences: {details['text_differences']}\n")
                    if details['errors']:
                        f.write(f"  Errors: {len(details['errors'])}\n")
                        for error in details['errors']:
                            f.write(f"    - {error}\n")
            
            # JSON report
            json_report_file = self.output_folder / "comparison_summary.json"
            json_stats = self.stats.copy()
            json_stats['start_time'] = self.stats['start_time'].isoformat()
            json_stats['end_time'] = self.stats['end_time'].isoformat()
            json_stats['duration_seconds'] = duration
            
            with open(json_report_file, 'w', encoding='utf-8') as f:
                json.dump(json_stats, f, indent=2, ensure_ascii=False)
            
            self.log_message("Summary reports generated:", "SUCCESS")
            self.log_message(f"  üìÑ Text report: {report_file}", "INFO")
            self.log_message(f"  üìã JSON report: {json_report_file}", "INFO")
            
        except Exception as e:
            self.log_message(f"Error generating reports: {str(e)}", "ERROR")
    
    def run_comparison(self):
        """Run the complete comparison process"""
        self.stats['start_time'] = datetime.now()
        
        print("\n" + "="*60)
        print("üöÄ Excel Comparison Tool - Advanced Version")
        print("üìã Supports both .xlsx and .xls formats")
        print("="*60)
        self.log_message(f"Working directory: {self.base_path}", "INFO")
        
        # Validate setup
        if not self.validate_setup():
            self.log_message("Setup validation failed. Please check folder structure.", "ERROR")
            return False
        
        # Get matching files
        matching_files = self.get_matching_files()
        
        if not matching_files:
            self.log_message("No files to compare. Please add Excel files to all three folders.", "WARNING")
            return False
        
        print(f"\nüîÑ Processing {len(matching_files)} files...")
        print("-" * 60)
        
        for i, file_name in enumerate(matching_files, 1):
            print(f"\nüìÅ Processing file {i}/{len(matching_files)}: {file_name}")
            
            new_file = self.new_folder / file_name
            prev_file = self.prev_folder / file_name
            template_file = self.template_folder / file_name
            
            # Create output filename - always save as .xlsx for better compatibility
            name_parts = file_name.rsplit('.', 1)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            # Force .xlsx extension for output regardless of input format
            output_name = f"{name_parts[0]}_COMPARISON_{timestamp}.xlsx"
            output_file = self.output_folder / output_name
            
            try:
                file_stats = self.compare_sheets(new_file, prev_file, template_file, output_file)
                
                # Update overall statistics
                self.stats['total_files_processed'] += 1
                self.stats['total_sheets_compared'] += file_stats['sheets_processed']
                self.stats['total_differences_found'] += file_stats['differences_found']
                self.stats['numeric_differences'] += file_stats['numeric_differences']
                self.stats['text_differences'] += file_stats['text_differences']
                
                if file_stats['differences_found'] > 0:
                    self.stats['files_with_differences'] += 1
                
                if file_stats['errors']:
                    self.stats['processing_errors'] += len(file_stats['errors'])
                
                # Store file details
                self.stats['file_details'][file_name] = file_stats
                
            except Exception as e:
                error_msg = f"Error processing {file_name}: {str(e)}"
                self.log_message(error_msg, "ERROR")
                self.stats['processing_errors'] += 1
                self.stats['file_details'][file_name] = {
                    'sheets_processed': 0,
                    'differences_found': 0,
                    'numeric_differences': 0,
                    'text_differences': 0,
                    'errors': [error_msg]
                }
                continue
        
        # Generate reports
        self.generate_summary_report()
        
        # Print final summary
        print("\n" + "="*60)
        print("‚úÖ Comparison process completed!")
        print("="*60)
        print(f"üìä Files processed: {self.stats['total_files_processed']}")
        print(f"üìà Files with differences: {self.stats['files_with_differences']}")
        print(f"üîç Total differences: {self.stats['total_differences_found']}")
        print(f"üî¢ Numeric differences: {self.stats['numeric_differences']}")
        print(f"üìù Text differences: {self.stats['text_differences']}")
        print(f"‚ùå Processing errors: {self.stats['processing_errors']}")
        print(f"\nüìÅ Results saved in: {self.output_folder}")
        print(f"üìÑ Log file: {self.log_file}")
        
        # Color coding explanation
        print("\nüé® Color Coding in Output Files:")
        print("  üî¥ Red: Numeric differences (shows new - old)")
        print("  üü¢ Green: New numeric values (where prev was text)")
        print("  üü° Yellow: Text values (where prev was numeric)")
        print("  üî¥ Red: Text differences")
        
        return True


def main():
    """Main function to run the Excel comparison"""
    try:
        # Get the current directory
        current_dir = os.path.dirname(os.path.abspath(__file__))
        
        # Initialize and run comparator
        comparator = ExcelComparator(current_dir)
        success = comparator.run_comparison()
        
        if success:
            print(f"\nüéâ Success! Check the comparison_results folder for output files.")
        else:
            print(f"\n‚ö†Ô∏è  Process completed with issues. Check the logs for details.")
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Process interrupted by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {str(e)}")
        print(f"Full traceback:")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
